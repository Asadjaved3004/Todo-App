{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'TodoApp',\n  data() {\n    return {\n      task: '',\n      editedTask: null,\n      availablestatuses: ['to-do', 'in-progress', 'finished'],\n      tasks: [{\n        name: 'Steal Fruits from Store',\n        status: 'To-do'\n      }, {\n        name: 'Eat 1kg chocolate in 1 hour',\n        status: 'in-progress'\n      }]\n    };\n  },\n  methods: {\n    submitTask() {\n      if (this.task.length == 0) return;\n      if (this.editedTask == null) {\n        this.tasks.push({\n          name: this.task,\n          status: 'to-do'\n        });\n      } else {\n        this.tasks[this.editedTask].name = this.task;\n        this.editedTask = null;\n      }\n      this.task = '';\n    },\n    deleteTask(index) {\n      this.tasks.splice(index, 1);\n    },\n    editTask(index) {\n      this.task = this.tasks[index].name;\n      this.editedTask = index;\n    },\n    changeStatus(index) {\n      let newIndex = this.availablestatuses.indexOf(this.tasks[index].status);\n      if (++newIndex > 2) newIndex = 0;\n      this.tasks[index].status = this.availablestatuses[newIndex];\n    },\n    firstCharUpper(str) {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n  }\n};","map":{"version":3,"names":["name","data","task","editedTask","availablestatuses","tasks","status","methods","submitTask","length","push","deleteTask","index","splice","editTask","changeStatus","newIndex","indexOf","firstCharUpper","str","charAt","toUpperCase","slice"],"sources":["/home/teresol/Documents/FrontEnd/Todo-App/src/components/TodoApp.vue"],"sourcesContent":["<template>\n <div class=\"container\">\n  <h1 class=\"text-center mt-5\">My Vue Todo-App</h1>\n  <!-------------Input-------->\n  <div class=\"d-flex\">\n<input  v-model=\"task\" type=\"text\" placeholder=\"Enter task\" class=\"form-control\">\n<button v-on:click=\"submitTask\" class=\"btn btn-warning rounded-0\">Submit</button>\n  </div>\n\n  <!------------------Task Table------->\n\n  <table class=\"table table-bordered mt-5\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Task</th>\n      <th scope=\"col\">Status</th>\n      <th scope=\"col\" class=\"text-center\">#</th>\n      <th scope=\"col\" class=\"text-center\">#</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr v-for=\"(task,index) in tasks\" :key=\"index\">\n      <td>\n        <span :class=\"{'finished',task.s}\">\n          {{ task.name }}\n        </span>\n     </td>\n      <td style=\"width:120px\"> \n        <span @click=\"changeStatus(index)\" class=\"pointer\">\n          {{ firstCharUpper(task.status) }}\n        </span>\n      </td>\n      <td>\n    <div class=\"text-center\" @click=\"editTask(index)\">\n    <span class=\"fa fa-pen\"></span>\n    </div>\n      </td>\n      <td>\n        <div class=\"text-center\" @click=\"deleteTask(index)\">\n    <span class=\"fa fa-trash\"></span>\n    </div>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n </div>\n</template>\n\n<script>\nexport default {\n  name: 'TodoApp',\n  data(){\n    return {\n      task:'',\n      editedTask:null,\n      availablestatuses:['to-do','in-progress','finished'],\n      tasks:[\n        {\n          name:'Steal Fruits from Store',\n          status:'To-do'\n        },\n        {\n          name:'Eat 1kg chocolate in 1 hour',\n          status:'in-progress'\n        }\n      ]\n    }\n  },\n  methods:{\n    submitTask(){\n  \n\n      if(this.task.length==0)\n        return;\n        if(this.editedTask==null){\n      this.tasks.push({\n        name:this.task,\n        status:'to-do'\n      });\n         }else{\n      this.tasks[this.editedTask].name=this.task;\n      this.editedTask=null;\n    }\n      this.task='';\n    },\n    deleteTask(index){\n      this.tasks.splice(index,1)\n    },\n    editTask(index){\n      this.task=this.tasks[index].name;\n      this.editedTask=index;\n    },\n    changeStatus(index){\n      let newIndex=this.availablestatuses.indexOf(this.tasks[index].status);\n      if(++newIndex > 2)\n        newIndex=0;\n        this.tasks[index].status=this.availablestatuses[newIndex];\n      \n\n    },\n    firstCharUpper(str){\n      return str.charAt(0).toUpperCase()+ str.slice(1);\n    }\n  }\n\n}\n</script>\n\n<style scoped>\n.pointer{\n  cursor:pointer;\n}\n.finished{\n  text-decoration: line-through;\n}\n</style>\n"],"mappings":";AAkDA,eAAe;EACbA,IAAI,EAAE,SAAS;EACfC,IAAIA,CAAA,EAAE;IACJ,OAAO;MACLC,IAAI,EAAC,EAAE;MACPC,UAAU,EAAC,IAAI;MACfC,iBAAiB,EAAC,CAAC,OAAO,EAAC,aAAa,EAAC,UAAU,CAAC;MACpDC,KAAK,EAAC,CACJ;QACEL,IAAI,EAAC,yBAAyB;QAC9BM,MAAM,EAAC;MACT,CAAC,EACD;QACEN,IAAI,EAAC,6BAA6B;QAClCM,MAAM,EAAC;MACT;IAEJ;EACF,CAAC;EACDC,OAAO,EAAC;IACNC,UAAUA,CAAA,EAAE;MAGV,IAAG,IAAI,CAACN,IAAI,CAACO,MAAM,IAAE,CAAC,EACpB;MACA,IAAG,IAAI,CAACN,UAAU,IAAE,IAAI,EAAC;QAC3B,IAAI,CAACE,KAAK,CAACK,IAAI,CAAC;UACdV,IAAI,EAAC,IAAI,CAACE,IAAI;UACdI,MAAM,EAAC;QACT,CAAC,CAAC;MACC,CAAC,MAAI;QACR,IAAI,CAACD,KAAK,CAAC,IAAI,CAACF,UAAU,CAAC,CAACH,IAAI,GAAC,IAAI,CAACE,IAAI;QAC1C,IAAI,CAACC,UAAU,GAAC,IAAI;MACtB;MACE,IAAI,CAACD,IAAI,GAAC,EAAE;IACd,CAAC;IACDS,UAAUA,CAACC,KAAK,EAAC;MACf,IAAI,CAACP,KAAK,CAACQ,MAAM,CAACD,KAAK,EAAC,CAAC;IAC3B,CAAC;IACDE,QAAQA,CAACF,KAAK,EAAC;MACb,IAAI,CAACV,IAAI,GAAC,IAAI,CAACG,KAAK,CAACO,KAAK,CAAC,CAACZ,IAAI;MAChC,IAAI,CAACG,UAAU,GAACS,KAAK;IACvB,CAAC;IACDG,YAAYA,CAACH,KAAK,EAAC;MACjB,IAAII,QAAQ,GAAC,IAAI,CAACZ,iBAAiB,CAACa,OAAO,CAAC,IAAI,CAACZ,KAAK,CAACO,KAAK,CAAC,CAACN,MAAM,CAAC;MACrE,IAAG,EAAEU,QAAO,GAAI,CAAC,EACfA,QAAQ,GAAC,CAAC;MACV,IAAI,CAACX,KAAK,CAACO,KAAK,CAAC,CAACN,MAAM,GAAC,IAAI,CAACF,iBAAiB,CAACY,QAAQ,CAAC;IAG7D,CAAC;IACDE,cAAcA,CAACC,GAAG,EAAC;MACjB,OAAOA,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAEF,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC;IAClD;EACF;AAEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}